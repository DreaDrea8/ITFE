services:
  proxy:
    container_name: nginx
    build:
      context: .
      dockerfile: ./conf/nginx/Dockerfile
    ports:
      - 80:80
      - 443:443
    restart: always
    env_file:
      - .env
    networks:
      - nginx_network
    depends_on:
      - frontend
      - backend
      - pma

  frontend:
    container_name: frontend
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
      target: ${ENV}
    restart: always
    environment:
      NODE_ENV: ${NODE_ENV}
    env_file:
      - .env
    volumes:
      - ./frontend:/var/www
    networks:
      - nginx_network

  backend:
    container_name: backend
    build:
      context: .
      dockerfile: ./backend/Dockerfile
      target: ${ENV}
    ports:
      - 3000:3000
    restart: always
    env_file:
      - .env
    volumes:
      - ./backend:/var/www
    networks:
      - nginx_network
      - mariadb_network
    depends_on:
      mariadb:
        condition: service_healthy

  mariadb:
    container_name: mariadb
    image: mariadb:11.5.2
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: app
    volumes:
      - mariadb_data:/var/lib/mysql
      - ./sql:/docker-entrypoint-initdb.d
    ports:
      - 3306:3306
    healthcheck:
      test:
        [
          "CMD",
          "healthcheck.sh",
          "--su-mysql",
          "--connect",
          "--innodb_initialized",
        ]
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - mariadb_network

  pma:
    container_name: pma
    image: phpmyadmin
    restart: always
    environment:
      PMA_HOST: mariadb
      PMA_USER: root
      PMA_PASSWORD: password
    depends_on:
      mariadb:
        condition: service_healthy
    networks:
      - mariadb_network
      - nginx_network

networks:
  nginx_network:
    driver: bridge
  mariadb_network:
    driver: bridge

volumes:
  mariadb_data:
